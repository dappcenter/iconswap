{"version":3,"sources":["constants.js","API.js","utils.js","Swap.js","Homepage.js","App.js","serviceWorker.js","index.js"],"names":["Networks","Object","freeze","LOCALHOST","Symbol","MAINNET","EULJIRO","YEOUIDO","SCORE_NETWORK","ICX_TOKEN_CONTRACT","UnconfirmedTransaction","Error","txHash","name","WrongEventSignature","api","network","scoreAddress","iconNetworkInfo","this","_getNetworkInfo","url","httpProvider","IconService","HttpProvider","httpDebugProvider","_nid","nid","_network","_iconService","_iconDebugService","_scoreAddress","iconNetworksInfo","__call","then","whitelist","swapId","swapid","swap","orderId","orderid","contract","Promise","resolve","reject","decimals","walletAddress","order","value","IconConverter","toHex","__iconexCallTransaction","contract1","amount1","contract2","amount2","params","toBigNumber","tx","a","__txResult","txResult","eventLogs","console","log","parseInt","order1","order2","symbol","__iconexConnectRequest","payload","address","from","to","method","stepLimit","transaction","__icxCallTransactionBuild","jsonRpcQuery","jsonrpc","toRawTransaction","id","__iconexJsonRpc","__estimateCallStep","__iconexCallTransactionEx","requestType","window","addEventListener","eventHandler","event","detail","removeEventListener","dispatchEvent","CustomEvent","type","callBuilder","IconBuilder","CallBuilder","keys","length","call","build","execute","err","wallet","callTransactionBuilder","CallTransactionBuilder","getAddress","IconAmount","of","Unit","ICX","toLoop","nonce","version","timestamp","Date","getTime","SignedTransaction","sendTransaction","provider","request","IcxTransactionBuilder","retriesLeft","interval","getTransactionResult","setTimeout","getTokenDetails","tokenName","tokenSymbol","getDecimals","Swap","match","useState","orders","setOrders","setSwap","ready","setReady","useEffect","refreshSwap","getSwap","orderId1","orderId2","getOrder","token","setInterval","depositOrder","fulfillIcxOrder","fulfillIRC2Order","depositButtonDisabled","className","href","exponentiatedBy","disabled","onClick","doSwap","cancelSwap","Homepage","setWhitelist","setContract1","setAmount1","setContract2","setAmount2","setSwapId","getWhitelist","promises","map","all","reduce","obj","onChange","document","getElementById","key","decimals1","decimals2","digits1","digits2","createSwap","swapInfo","App","setWallet","iconexAskAddress","exact","path","render","props","Boolean","location","hostname","ReactDOM","querySelector","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5e4439f0.chunk.js","sourcesContent":["export const Networks = Object.freeze({\n    LOCALHOST: Symbol('LOCALHOST'),\n    MAINNET: Symbol('MAINNET'),\n    EULJIRO: Symbol('EULJIRO'),\n    YEOUIDO: Symbol('YEOUIDO')\n})\n\n// SCORE Configuration\nexport const SCORE_ENDPOINT = 'cx17b53a38661427590e0e5022e0d452a9f7fc4432'\nexport const SCORE_NETWORK = Networks.LOCALHOST\n\n// ICX Configuration\nexport const ICX_TOKEN_CONTRACT = 'cx0000000000000000000000000000000000000000'\nexport const ICX_TOKEN_DECIMALS = 18","import IconService from 'icon-sdk-js'\nimport { SCORE_NETWORK, SCORE_ENDPOINT, Networks, ICX_TOKEN_CONTRACT, ICX_TOKEN_DECIMALS } from './constants'\n\n// ================================================\n//  Constants\n// ================================================\nconst SwapCreatedEvent = 'SwapCreatedEvent(int,int,int)'\n/*\nconst SwapSuccessEvent = 'SwapSuccessEvent(int)'\nconst SwapCancelledEvent = 'SwapCancelledEvent(int)'\nconst OrderFilledEvent = 'OrderFilledEvent(int)'\nconst OrderTransferedEvent = 'OrderTransferedEvent(int,Address,int,Address)'\nconst OrderRefundedEvent = 'OrderRefundedEvent(int)'\n*/\n\n// ================================================\n//  Exceptions\n// ================================================\nexport class SCOREUnhandledError extends Error {\n    constructor(error, txHash) {\n        super(error, txHash)\n        this.name = 'SCOREUnhandledError'\n        this.txHash = txHash\n        this.error = error\n    }\n\n    toString() {\n        console.log(this.error)\n        return 'Internal Error, please report this transaction hash on Telegram (https://t.me/iconationteam) : ' + this.txHash + ' - Thank you!'\n    }\n}\n\nexport class UnconfirmedTransaction extends Error {\n    constructor(txHash) {\n        super(txHash)\n        this.name = 'UnconfirmedTransaction'\n    }\n\n    toString() {\n        return 'The transaction cannot be confirmed.'\n    }\n}\n\nexport class WrongEventSignature extends Error {\n    constructor(txHash) {\n        super(txHash)\n        this.name = 'WrongEventSignature'\n    }\n\n    toString() {\n        return 'The event received was not expected.'\n    }\n}\n\n// ================================================\n//  API Implementation\n// ================================================\nclass API {\n    constructor(network, scoreAddress) {\n        const iconNetworkInfo = this._getNetworkInfo(network)\n\n        const url = iconNetworkInfo.url\n        const httpProvider = new IconService.HttpProvider(url + '/api/v3')\n        const httpDebugProvider = new IconService.HttpProvider(url + '/api/debug/v3')\n\n        this._nid = iconNetworkInfo.nid\n        this._network = network\n        this._iconService = new IconService(httpProvider)\n        this._iconDebugService = new IconService(httpDebugProvider)\n        this._scoreAddress = scoreAddress\n    }\n\n    _getNetworkInfo(network) {\n        const iconNetworksInfo = []\n        iconNetworksInfo[Networks.LOCALHOST] = { url: 'http://127.0.0.1:9000', nid: 0 }\n        iconNetworksInfo[Networks.MAINNET] = { url: 'https://ctz.solidwallet.io', nid: 1 }\n        iconNetworksInfo[Networks.EULJIRO] = { url: 'https://test-ctz.solidwallet.io', nid: 2 }\n        iconNetworksInfo[Networks.YEOUIDO] = { url: 'https://bicon.net.solidwallet.io', nid: 3 }\n        return iconNetworksInfo[network]\n    }\n\n    getEndpoint() {\n        return this._getNetworkInfo(Networks.MAINNET).url\n    }\n\n    getWhitelist() {\n        return this.__call(this._scoreAddress, 'get_whitelist').then(whitelist => {\n            return whitelist\n        })\n    }\n\n    getSwap(swapId) {\n        return api.__call(this._scoreAddress, 'get_swap', { swapid: swapId }).then(swap => {\n            return swap\n        })\n    }\n\n    getOrder(orderId) {\n        return api.__call(this._scoreAddress, 'get_order', { orderid: orderId }).then(swap => {\n            return swap\n        })\n    }\n\n    getDecimals(contract) {\n        if (contract === ICX_TOKEN_CONTRACT) {\n            return new Promise((resolve, reject) => {\n                resolve(ICX_TOKEN_DECIMALS)\n            })\n        }\n        return api.__call(contract, 'decimals').then(decimals => {\n            return decimals\n        })\n    }\n\n    fulfillIcxOrder(walletAddress, order) {\n        const value = IconService.IconConverter.toHex(order['amount'])\n        return api.__iconexCallTransaction(walletAddress, this._scoreAddress, 'fulfill_icx_order', value, { orderid: order['id'] }).then(txHash => {\n            return txHash\n        })\n    }\n\n    fulfillIRC2Order(walletAddress, order) {\n        const value = IconService.IconConverter.toHex(order['amount'])\n        return api.__iconexCallTransaction(walletAddress, order['contract'], 'transfer', 0, {\n            '_to': this._scoreAddress,\n            '_value': value,\n            '_data': IconService.IconConverter.toHex(order['id'])\n        }).then(txHash => {\n            return txHash\n        })\n    }\n\n    doSwap(walletAddress, swapId) {\n        return api.__iconexCallTransaction(walletAddress, this._scoreAddress, 'do_swap', 0, { swapid: swapId }).then(txHash => {\n            return txHash\n        })\n    }\n\n    cancelSwap(walletAddress, swapId) {\n        return api.__iconexCallTransaction(walletAddress, this._scoreAddress, 'cancel_swap', 0, { swapid: swapId }).then(txHash => {\n            return txHash\n        })\n    }\n\n    createSwap(walletAddress, contract1, amount1, contract2, amount2) {\n        const params = {\n            contract1: contract1,\n            amount1: IconService.IconConverter.toHex(IconService.IconConverter.toBigNumber(amount1)),\n            contract2: contract2,\n            amount2: IconService.IconConverter.toHex(IconService.IconConverter.toBigNumber(amount2))\n        }\n        return this.__iconexCallTransaction(walletAddress, this._scoreAddress, 'create_swap', 0, params)\n            .then(async tx => {\n                const txHash = tx['result']\n                const txResult = await this.__txResult(txHash)\n                const eventLogs = txResult['eventLogs'][0]\n                if (eventLogs['indexed'][0] !== SwapCreatedEvent) {\n                    throw WrongEventSignature(eventLogs['indexed']);\n                }\n                console.log(txResult)\n                const swapId = parseInt(eventLogs['indexed'][1], 16)\n                const order1 = parseInt(eventLogs['data'][0], 16)\n                const order2 = parseInt(eventLogs['data'][1], 16)\n                return { swapId: swapId, order1: order1, order2: order2 }\n            })\n    }\n\n    // IRC2 Token Interface ============================================================\n    tokenName(contract) {\n        return this.__call(contract, 'name').then(name => {\n            return name\n        })\n    }\n    tokenSymbol(contract) {\n        return this.__call(contract, 'symbol').then(symbol => {\n            return symbol\n        })\n    }\n\n    // ICONex Connect Extension =============================================================\n    iconexHasAccount() {\n        return this.__iconexConnectRequest('REQUEST_HAS_ACCOUNT').then(payload => {\n            return payload\n        })\n    }\n\n    iconexHasAddress(address) {\n        return this.__iconexConnectRequest('REQUEST_HAS_ADDRESS', address).then(payload => {\n            return payload\n        })\n    }\n\n    iconexAskAddress() {\n        return this.__iconexConnectRequest('REQUEST_ADDRESS').then(payload => {\n            return payload\n        })\n    }\n\n    // ======================================================================================\n    // Following classes are private because they are lower level methods at a protocol level\n    __iconexCallTransactionEx(from, to, method, value, stepLimit, params) {\n        const transaction = this.__icxCallTransactionBuild(from, to, method, value, stepLimit, params)\n        const jsonRpcQuery = {\n            jsonrpc: '2.0',\n            method: 'icx_sendTransaction',\n            params: IconService.IconConverter.toRawTransaction(transaction),\n            id: 1234\n        }\n        return this.__iconexJsonRpc(jsonRpcQuery)\n    }\n\n    __iconexCallTransaction(from, to, method, value, params) {\n        return api.__estimateCallStep(from, to, method, value, params).then(stepLimit => {\n            return api.__iconexCallTransactionEx(from, to, method, value, stepLimit, params)\n        })\n    }\n\n    __iconexConnectRequest(requestType, payload) {\n        return new Promise((resolve, reject) => {\n            function eventHandler(event) {\n                const { payload } = event.detail\n                window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler)\n                resolve(payload)\n            }\n            window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler)\n\n            window.dispatchEvent(new window.CustomEvent('ICONEX_RELAY_REQUEST', {\n                detail: {\n                    type: requestType,\n                    payload\n                }\n            }))\n        })\n    }\n\n    __iconexJsonRpc(jsonRpcQuery) {\n        return this.__iconexConnectRequest('REQUEST_JSON-RPC', jsonRpcQuery).then(payload => {\n            return payload\n        })\n    }\n\n    // ======================================================================================\n    __call(to, method, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                let callBuilder = new IconService.IconBuilder.CallBuilder()\n                    .from(null)\n                    .to(to)\n                    .method(method)\n\n                // Optional \"params\" field\n                if (Object.keys(params).length !== 0) {\n                    callBuilder = callBuilder.params(params)\n                }\n\n                const call = callBuilder.build()\n                const result = this._iconService.call(call).execute()\n                resolve(result)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    __callTx(to, method, wallet, stepLimit, value = 0, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                let callTransactionBuilder = new IconService.IconBuilder.CallTransactionBuilder()\n                    .from(wallet.getAddress())\n                    .to(to)\n                    .value(IconService.IconConverter.toHex(IconService.IconAmount.of(value, IconService.IconAmount.Unit.ICX).toLoop()))\n                    .stepLimit(IconService.IconConverter.toBigNumber(stepLimit)) // 40000000\n                    .nid(IconService.IconConverter.toBigNumber(this._nid))\n                    .nonce(IconService.IconConverter.toBigNumber(1))\n                    .version(IconService.IconConverter.toBigNumber(3))\n                    .timestamp((new Date()).getTime() * 1000)\n                    .method(method)\n\n                // Optional \"params\" field\n                if (Object.keys(params).length !== 0) {\n                    callTransactionBuilder = callTransactionBuilder.params(params)\n                }\n\n                const transaction = new IconService.SignedTransaction(callTransactionBuilder.build(), wallet)\n                const result = this._iconService.sendTransaction(transaction).execute()\n                resolve(result)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    __estimateCallStep(from, to, method, value, params = {}) {\n        const transaction = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": \"debug_estimateStep\",\n            \"id\": 1,\n            \"params\": {\n                \"version\": \"0x3\",\n                \"from\": from,\n                \"to\": to,\n                \"value\": IconService.IconConverter.toHex(IconService.IconConverter.toBigNumber(value)),\n                \"timestamp\": IconService.IconConverter.toHex((new Date()).getTime() * 1000),\n                \"nid\": IconService.IconConverter.toHex(IconService.IconConverter.toBigNumber(this._nid)),\n                \"nonce\": \"0x1\",\n                \"dataType\": \"call\",\n                \"data\": {\n                    \"method\": method,\n                    \"params\": params\n                }\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n            try {\n                const result = this._iconDebugService.provider.request(transaction).execute()\n                resolve(result)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    __icxCallTransactionBuild(from, to, method, value, stepLimit, params = {}) {\n        let callTransactionBuilder = new IconService.IconBuilder.CallTransactionBuilder()\n            .from(from)\n            .to(to)\n            .value(IconService.IconConverter.toHex(value))\n            .stepLimit(IconService.IconConverter.toBigNumber(stepLimit))\n            .nid(IconService.IconConverter.toBigNumber(this._nid))\n            .nonce(IconService.IconConverter.toBigNumber(1))\n            .version(IconService.IconConverter.toBigNumber(3))\n            .timestamp((new Date()).getTime() * 1000)\n            .method(method)\n\n        // Optional \"params\" field\n        if (Object.keys(params).length !== 0) {\n            callTransactionBuilder = callTransactionBuilder.params(params)\n        }\n\n        return callTransactionBuilder.build()\n    }\n\n    __icxTransactionBuild(from, to, value, stepLimit) {\n        return new IconService.IconBuilder.IcxTransactionBuilder()\n            .from(from)\n            .to(to)\n            .value(IconService.IconConverter.toBigNumber(value))\n            .stepLimit(IconService.IconConverter.toBigNumber(stepLimit))\n            .nid(IconService.IconConverter.toBigNumber(this._nid))\n            .version(IconService.IconConverter.toBigNumber(3))\n            .timestamp((new Date()).getTime() * 1000)\n            .build()\n    }\n\n    async __txResult(txHash, retriesLeft = 1000, interval = 100) {\n        try {\n            return await this._iconService.getTransactionResult(txHash).execute()\n        } catch (error) {\n            if (retriesLeft) {\n                await new Promise((resolve, reject) => setTimeout(resolve, interval))\n                return this.__txResult(txHash, retriesLeft - 1, interval)\n            } else throw new UnconfirmedTransaction(txHash)\n        }\n    }\n}\n\nexport const api = new API(SCORE_NETWORK, SCORE_ENDPOINT)\n","import { api } from './API'\nimport { ICX_TOKEN_CONTRACT, ICX_TOKEN_DECIMALS } from './constants'\n\nexport const getTokenDetails = (contract) => {\n    if (contract === ICX_TOKEN_CONTRACT) {\n        return new Promise((resolve, reject) => {\n            resolve({ name: 'ICX', symbol: 'ICX', contract: contract, decimals: ICX_TOKEN_DECIMALS })\n        })\n    }\n    return api.tokenName(contract).then(name => {\n        return api.tokenSymbol(contract).then(symbol => {\n            return api.getDecimals(contract).then(decimals => {\n                return { name: name, symbol: symbol, contract: contract, decimals: parseInt(decimals, 16) }\n            })\n        })\n    })\n}\n","import React, { useState, useEffect } from 'react'\nimport { IconConverter } from 'icon-sdk-js'\nimport { api } from './API'\nimport { getTokenDetails } from './utils'\nimport { ICX_TOKEN_CONTRACT } from './constants'\n\nconst Swap = ({ match, wallet }) => {\n    const swapId = match.params.id\n    const [orders, setOrders] = useState(null)\n    const [swap, setSwap] = useState(null)\n    const [ready, setReady] = useState(false)\n\n    const refreshOrders = (orderId1, orderId2) => {\n        api.getOrder(orderId1).then(order1 => {\n            getTokenDetails(order1['contract']).then(token => {\n                order1['token'] = token\n                order1['id'] = orderId1;\n\n                api.getOrder(orderId2).then(order2 => {\n                    getTokenDetails(order2['contract']).then(token => {\n                        order2['token'] = token\n                        order2['id'] = orderId2;\n\n                        setOrders([order1, order2])\n                    })\n                })\n\n            })\n        })\n    }\n\n    useEffect(() => {\n        const refreshSwap = () => {\n            return api.getSwap(swapId).then(swap => {\n                refreshOrders(swap['order1'], swap['order2'])\n                setSwap(swap)\n                !ready && setReady(true)\n            })\n        }\n\n        refreshSwap()\n        if (ready) {\n            setInterval(() => {\n                refreshSwap()\n            }, 1000);\n        }\n    }, [ready, swapId]);\n\n    const depositOrder = (order) => {\n        if (order['contract'] === ICX_TOKEN_CONTRACT) {\n            api.fulfillIcxOrder(wallet, order)\n        } else {\n            api.fulfillIRC2Order(wallet, order);\n        }\n    }\n\n    const swappable = () => {\n        return (orders\n            && orders[0]['status'] === 'FILLED'\n            && orders[1]['status'] === 'FILLED')\n    }\n\n    const cancellable = () => {\n        return (swap && swap['status'] === 'PENDING')\n    }\n\n    const depositButtonDisabled = (order) => {\n        return order['status'] !== 'EMPTY'\n    }\n\n    const doSwapClicked = () => {\n        api.doSwap(wallet, swapId)\n    }\n\n    const cancelSwapClicked = () => {\n        api.cancelSwap(wallet, swapId)\n    }\n\n    const swapSuccess = () => {\n        return swap && swap['status'] === 'SUCCESS'\n    }\n\n    const swapCancel = () => {\n        return swap && swap['status'] === 'CANCELLED'\n    }\n\n    return (\n        <>\n            {swapSuccess() &&\n                <div className=\"overlay\">\n                    <div className=\"overlayText\">\n                        Swap successfull! <br />\n                        <a href={\"https://tracker.icon.foundation/transaction/\" + swap['transaction']}>\n                            Check the transaction\n                </a>\n                    </div>\n                </div>\n            }\n\n            {swapCancel() &&\n                <div className=\"overlay\">\n                    <div className=\"overlayText\">\n                        Swap cancelled. Your funds have been refunded. <br />\n                        <a href={\"https://tracker.icon.foundation/transaction/\" + swap['transaction']}>\n                            Check the transaction\n                    </a>\n                    </div>\n                </div>\n            }\n\n            {orders && <>\n                <div className=\"split left\">\n                    <div className=\"centered\">\n                        <p className=\"bigtext\">\n                            {IconConverter.toBigNumber(orders[0]['amount'])\n                                / IconConverter.toBigNumber('10').exponentiatedBy(orders[0]['token']['decimals'])\n                            } {orders[0]['token']['symbol']} ({orders[0]['token']['name']})\n                            </p>\n                        <button className=\"bigbutton\" disabled={depositButtonDisabled(orders[0])}\n                            onClick={() => { depositOrder(orders[0]) }}>Deposit</button>\n                    </div>\n                </div>\n\n                <div className=\"split right\">\n                    <div className=\"centered\">\n                        <p className=\"bigtext\">\n                            {IconConverter.toBigNumber(orders[1]['amount'])\n                                / IconConverter.toBigNumber('10').exponentiatedBy(orders[1]['token']['decimals'])\n                            } {orders[1]['token']['symbol']} ({orders[1]['token']['name']})\n                            </p>\n                        <button className=\"bigbutton\" disabled={depositButtonDisabled(orders[1])}\n                            onClick={() => { depositOrder(orders[1]) }}>Deposit</button>\n                    </div>\n                </div>\n\n                <div className=\"center\">\n                    <button className=\"bigbutton\" disabled={!swappable()}\n                        onClick={() => doSwapClicked()}>\n                        Swap!\n                        </button>\n                </div>\n\n                {swap && swap['author'] === wallet &&\n                    <div className=\"bottom\">\n                        <button className=\"bigbutton\" disabled={!cancellable()}\n                            onClick={() => cancelSwapClicked()}>\n                            Cancel Swap\n                        </button>\n                    </div>\n                }\n            </>}\n        </>\n    )\n}\n\nexport default Swap","import React, { useState } from 'react'\nimport { IconConverter } from 'icon-sdk-js'\nimport { api } from './API'\nimport { Redirect } from 'react-router-dom'\nimport { getTokenDetails } from './utils'\n\nconst Homepage = ({ wallet }) => {\n\n    const [whitelist, setWhitelist] = useState(null)\n    const [contract1, setContract1] = useState(null)\n    const [amount1, setAmount1] = useState(12)\n    const [contract2, setContract2] = useState(null)\n    const [amount2, setAmount2] = useState(34)\n    const [swapId, setSwapId] = useState(null)\n\n    !whitelist && api.getWhitelist().then(contract => {\n        const promises = contract.map(contract => {\n            return getTokenDetails(contract)\n        })\n\n        Promise.all(promises).then(whitelist => {\n            setContract1(whitelist[0])\n            setContract2(whitelist[0])\n            whitelist = whitelist.reduce(function (map, obj) {\n                map[obj.contract] = obj\n                return map\n            }, {})\n            setWhitelist(whitelist)\n        })\n    })\n\n    const createSwapClicked = () => {\n        api.getDecimals(contract1.contract).then(decimals1 => {\n            api.getDecimals(contract2.contract).then(decimals2 => {\n                const digits1 = IconConverter.toBigNumber('10').exponentiatedBy(decimals1)\n                const digits2 = IconConverter.toBigNumber('10').exponentiatedBy(decimals2)\n                api.createSwap(\n                    wallet,\n                    contract1.contract,\n                    amount1 * digits1,\n                    contract2.contract,\n                    amount2 * digits2)\n                    .then(swapInfo => {\n                        setSwapId(swapInfo['swapId'])\n                    })\n            })\n        })\n    }\n\n    const swappable = () => {\n        return contract1 && contract2 && amount1 && amount2\n    }\n\n    return (\n        <>\n            {swapId && <Redirect to={\"/swap/\" + swapId} />}\n\n            <div className=\"split left\">\n                <div className=\"centered\">\n                    {whitelist && <>\n                        <p>Choose a token :</p>\n                        <select id=\"tokens1\"\n                            onChange={() => setContract1(whitelist[document.getElementById('tokens1').value])}>\n\n                            {Object.keys(whitelist).map((key) => (\n                                <option key={whitelist[key].contract} value={whitelist[key].contract}>\n                                    {whitelist[key].name} ({whitelist[key].symbol})\n                        </option>\n                            ))}\n\n                        </select>\n\n                        <p>Choose the amount :</p>\n                        <input id=\"amount1\" onChange={() => setAmount1(document.getElementById('amount1').value)}>\n                        </input>\n                    </>}\n                </div>\n            </div>\n\n            <div className=\"split right\">\n                <div className=\"centered\">\n                    {whitelist && <>\n                        <p>Choose a token :</p>\n                        <select id=\"tokens2\"\n                            onChange={() => setContract2(whitelist[document.getElementById('tokens2').value])}>\n\n                            {Object.keys(whitelist).map((key) => (\n                                <option key={whitelist[key].contract} value={whitelist[key].contract}>\n                                    {whitelist[key].name} ({whitelist[key].symbol})\n                        </option>\n                            ))}\n\n                        </select>\n\n                        <p>Choose the amount :</p>\n                        <input id=\"amount2\" onChange={() => setAmount2(document.getElementById('amount2').value)}>\n                        </input>\n                    </>}\n                </div>\n            </div>\n\n            {swappable() &&\n                <div className=\"center\">\n                    <button className=\"bigbutton\"\n                        onClick={() => createSwapClicked()}>\n                        Create Swap\n                        </button>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Homepage","import React, { useState } from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport './App.css';\nimport Swap from './Swap'\nimport Homepage from './Homepage'\nimport { api } from './API'\n\n\nfunction App() {\n\n  const [wallet, setWallet] = useState('hxba2e54b54b695085f31ff1a9b33868b5aea44e33')\n\n  const loginIconex = () => {\n    api.iconexAskAddress().then(address => {\n      setWallet(address)\n    })\n  }\n\n  return (\n    <div className=\"App\">\n\n      {!wallet &&\n        <button className=\"bigbutton center\"\n          onClick={() => loginIconex()}>\n          Login with ICONex\n          </button>\n      }\n\n      {wallet &&\n        <Switch>\n          <Route exact path='/' render={(props) => <Homepage {...props} wallet={wallet} />} />\n          <Route exact path='/swap/:id' render={(props) => <Swap {...props} wallet={wallet} />} />\n        </Switch>\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom'\n\nReactDOM.render(\n    <HashRouter >\n        <App />\n    </HashRouter>,\n    document.querySelector('#root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}