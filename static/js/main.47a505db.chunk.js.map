{"version":3,"sources":["static/img/logo.png","constants.js","API.js","utils.js","OrderView.js","Swap.js","Header.js","Homepage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Networks","Object","freeze","LOCALHOST","Symbol","MAINNET","EULJIRO","YEOUIDO","SCORE_NETWORK","ICX_TOKEN_CONTRACT","UnconfirmedTransaction","Error","txHash","name","WrongEventSignature","api","network","scoreAddress","iconNetworkInfo","this","_getNetworkInfo","httpProvider","IconService","HttpProvider","httpDebugProvider","_nid","nid","_network","_iconService","_iconDebugService","_scoreAddress","iconNetworksInfo","tracker","__call","then","whitelist","swapId","swapid","swap","orderId","orderid","walletAddress","order","__iconexCallTransaction","contract","Promise","resolve","reject","decimals","value","IconConverter","toHex","data","hex","length","replace","params","_toBytes","contract1","amount1","contract2","amount2","toBigNumber","tx","a","__txResult","txResult","eventLogs","parseInt","order1","order2","symbol","__iconexConnectRequest","payload","address","from","to","method","stepLimit","transaction","__icxCallTransactionBuild","jsonRpcQuery","jsonrpc","toRawTransaction","id","__iconexJsonRpc","__estimateCallStep","console","log","__iconexCallTransactionEx","requestType","window","addEventListener","eventHandler","event","detail","removeEventListener","dispatchEvent","CustomEvent","type","callBuilder","IconBuilder","CallBuilder","keys","call","build","execute","err","wallet","callTransactionBuilder","CallTransactionBuilder","getAddress","IconAmount","of","Unit","ICX","toLoop","nonce","version","timestamp","Date","getTime","SignedTransaction","sendTransaction","provider","request","IcxTransactionBuilder","retriesLeft","interval","getTransactionResult","setTimeout","getTokenDetails","tokenName","tokenSymbol","getDecimals","OrderView","orderSuccess","className","orderEmpty","exponentiatedBy","disabled","depositButtonDisabled","onClick","fulfillIcxOrder","fulfillIRC2Order","depositOrder","withdrawButtonDisabled","refundOrder","Swap","match","useState","orders","setOrders","setSwap","ready","setReady","errorUi","setErrorUi","useEffect","refreshSwap","getSwap","orderId1","orderId2","getOrder","token","catch","error","setInterval","href","getTrackerEndpoint","rel","target","doSwap","cancelSwap","Header","setWallet","src","logo","height","alt","getNetworkName","localStorage","removeItem","Homepage","setWhitelist","setContract1","setAmount1","setContract2","setAmount2","setSwapId","waitForSwapCreation","setWaitForSwapCreation","getWhitelist","promises","map","all","reduce","obj","onChange","document","getElementById","key","decimals1","decimals2","digits1","digits2","createSwap","swapInfo","reason","finally","App","getItem","iconexAskAddress","setItem","exact","path","render","props","Boolean","location","hostname","ReactDOM","querySelector","navigator","serviceWorker","registration","unregister","message"],"mappings":"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","file":"static/js/main.47a505db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.39504760.png\";","export const Networks = Object.freeze({\n    LOCALHOST: Symbol('LOCALHOST'),\n    MAINNET: Symbol('MAINNET'),\n    EULJIRO: Symbol('EULJIRO'),\n    YEOUIDO: Symbol('YEOUIDO')\n})\n\nexport const WALLET_LOCAL_STORAGE_KEY = 'wallet'\n\n// SCORE Configuration\nexport const SCORE_ENDPOINT = 'cx875745968f7e01104bd7b3deafc2492851801440'\nexport const SCORE_NETWORK = Networks.YEOUIDO\n// export const SCORE_ENDPOINT = \"cx17b53a38661427590e0e5022e0d452a9f7fc4432\"\n// export const SCORE_NETWORK = Networks.LOCALHOST\n\n// ICX Configuration\nexport const ICX_TOKEN_CONTRACT = 'cx0000000000000000000000000000000000000000'\nexport const ICX_TOKEN_DECIMALS = 18","import IconService from 'icon-sdk-js'\nimport { SCORE_NETWORK, SCORE_ENDPOINT, Networks, ICX_TOKEN_CONTRACT, ICX_TOKEN_DECIMALS } from './constants'\n\n// ================================================\n//  Constants\n// ================================================\nconst SwapCreatedEvent = 'SwapCreatedEvent(int,int,int)'\n/*\nconst SwapSuccessEvent = 'SwapSuccessEvent(int)'\nconst SwapCancelledEvent = 'SwapCancelledEvent(int)'\nconst OrderFilledEvent = 'OrderFilledEvent(int)'\nconst OrderTransferedEvent = 'OrderTransferedEvent(int,Address,int,Address)'\nconst OrderRefundedEvent = 'OrderRefundedEvent(int)'\n*/\n\n// ================================================\n//  Exceptions\n// ================================================\nexport class SCOREUnhandledError extends Error {\n    constructor(error, txHash) {\n        super(error, txHash)\n        this.name = 'SCOREUnhandledError'\n        this.txHash = txHash\n        this.error = error\n    }\n\n    toString() {\n        console.log(this.error)\n        return 'Internal Error, please report this transaction hash on Telegram (https://t.me/iconationteam) : ' + this.txHash + ' - Thank you!'\n    }\n}\n\nexport class UnconfirmedTransaction extends Error {\n    constructor(txHash) {\n        super(txHash)\n        this.name = 'UnconfirmedTransaction'\n    }\n\n    toString() {\n        return 'The transaction cannot be confirmed.'\n    }\n}\n\nexport class WrongEventSignature extends Error {\n    constructor(txHash) {\n        super(txHash)\n        this.name = 'WrongEventSignature'\n    }\n\n    toString() {\n        return 'The event received was not expected.'\n    }\n}\n\n// ================================================\n//  API Implementation\n// ================================================\nclass API {\n    constructor(network, scoreAddress) {\n        const iconNetworkInfo = this._getNetworkInfo(network)\n\n        const api = iconNetworkInfo.api\n        const httpProvider = new IconService.HttpProvider(api + '/api/v3')\n        const httpDebugProvider = new IconService.HttpProvider(api + '/api/debug/v3')\n\n        this._nid = iconNetworkInfo.nid\n        this._network = network\n        this._iconService = new IconService(httpProvider)\n        this._iconDebugService = new IconService(httpDebugProvider)\n        this._scoreAddress = scoreAddress\n    }\n\n    _getNetworkInfo(network) {\n        const iconNetworksInfo = []\n        iconNetworksInfo[Networks.LOCALHOST] = {\n            name: 'localhost',\n            api: 'http://127.0.0.1:9000',\n            tracker: 'http://127.0.0.1:9000',\n            nid: 0\n        }\n        iconNetworksInfo[Networks.MAINNET] = {\n            name: 'MainNet',\n            api: 'https://ctz.solidwallet.io',\n            tracker: 'https://tracker.icon.foundation',\n            nid: 1\n        }\n        iconNetworksInfo[Networks.EULJIRO] = {\n            name: 'Euljiro (TestNet)',\n            api: 'https://test-ctz.solidwallet.io',\n            tracker: 'https://trackerdev.icon.foundation',\n            nid: 2\n        }\n        iconNetworksInfo[Networks.YEOUIDO] = {\n            name: 'Yeouido (TestNet)',\n            api: 'https://bicon.net.solidwallet.io',\n            tracker: 'https://bicon.tracker.solidwallet.io',\n            nid: 3\n        }\n        return iconNetworksInfo[network]\n    }\n\n    getAPIEndpoint() {\n        return this._getNetworkInfo(this._network).api\n    }\n\n    getTrackerEndpoint() {\n        return this._getNetworkInfo(this._network).tracker\n    }\n\n    getNetworkName() {\n        return this._getNetworkInfo(this._network).name\n    }\n\n    getWhitelist() {\n        return this.__call(this._scoreAddress, 'get_whitelist').then(whitelist => {\n            return whitelist\n        })\n    }\n\n    getSwap(swapId) {\n        return api.__call(this._scoreAddress, 'get_swap', { swapid: swapId }).then(swap => {\n            return swap\n        })\n    }\n\n    getOrder(orderId) {\n        return api.__call(this._scoreAddress, 'get_order', { orderid: orderId }).then(swap => {\n            return swap\n        })\n    }\n\n    refundOrder(walletAddress, order) {\n        return api.__iconexCallTransaction(walletAddress, this._scoreAddress, 'refund_order', 0, {\n            'orderid': order['id']\n        }).then(txHash => {\n            return txHash\n        })\n    }\n\n    getDecimals(contract) {\n        if (contract === ICX_TOKEN_CONTRACT) {\n            return new Promise((resolve, reject) => {\n                resolve(ICX_TOKEN_DECIMALS)\n            })\n        }\n        return api.__call(contract, 'decimals').then(decimals => {\n            return decimals\n        })\n    }\n\n    fulfillIcxOrder(walletAddress, order) {\n        const value = IconService.IconConverter.toHex(order['amount'])\n        return api.__iconexCallTransaction(walletAddress, this._scoreAddress, 'fulfill_icx_order', value, { orderid: order['id'] }).then(txHash => {\n            return txHash\n        })\n    }\n\n    _toBytes(data) {\n        const hex = IconService.IconConverter.toHex(data)\n        if (hex.length % 2 === 1) {\n            return '0x0' + hex.replace('0x', '')\n        }\n        return hex\n    }\n\n    fulfillIRC2Order(walletAddress, order) {\n        const value = IconService.IconConverter.toHex(order['amount'])\n        const params = {\n            '_to': this._scoreAddress,\n            '_value': value,\n            '_data': api._toBytes(order['id'])\n        }\n\n        return api.__iconexCallTransaction(walletAddress, order['contract'], 'transfer', 0, params).then(txHash => {\n            return txHash\n        })\n    }\n\n    doSwap(walletAddress, swapId) {\n        return api.__iconexCallTransaction(walletAddress, this._scoreAddress, 'do_swap', 0, { swapid: swapId }).then(txHash => {\n            return txHash\n        })\n    }\n\n    cancelSwap(walletAddress, swapId) {\n        return api.__iconexCallTransaction(walletAddress, this._scoreAddress, 'cancel_swap', 0, { swapid: swapId }).then(txHash => {\n            return txHash\n        })\n    }\n\n    createSwap(walletAddress, contract1, amount1, contract2, amount2) {\n        const params = {\n            contract1: contract1,\n            amount1: IconService.IconConverter.toHex(IconService.IconConverter.toBigNumber(amount1)),\n            contract2: contract2,\n            amount2: IconService.IconConverter.toHex(IconService.IconConverter.toBigNumber(amount2))\n        }\n        return this.__iconexCallTransaction(walletAddress, this._scoreAddress, 'create_swap', 0, params)\n            .then(async tx => {\n                if (!tx) return null;\n                const txHash = tx['result']\n                const txResult = await this.__txResult(txHash)\n                const eventLogs = txResult['eventLogs'][0]\n                if (eventLogs['indexed'][0] !== SwapCreatedEvent) {\n                    throw WrongEventSignature(eventLogs['indexed']);\n                }\n                const swapId = parseInt(eventLogs['indexed'][1], 16)\n                const order1 = parseInt(eventLogs['data'][0], 16)\n                const order2 = parseInt(eventLogs['data'][1], 16)\n                return { swapId: swapId, order1: order1, order2: order2 }\n            })\n    }\n\n    // IRC2 Token Interface ============================================================\n    tokenName(contract) {\n        return this.__call(contract, 'name').then(name => {\n            return name\n        })\n    }\n    tokenSymbol(contract) {\n        return this.__call(contract, 'symbol').then(symbol => {\n            return symbol\n        })\n    }\n\n    // ICONex Connect Extension =============================================================\n    iconexHasAccount() {\n        return this.__iconexConnectRequest('REQUEST_HAS_ACCOUNT').then(payload => {\n            return payload\n        })\n    }\n\n    iconexHasAddress(address) {\n        return this.__iconexConnectRequest('REQUEST_HAS_ADDRESS', address).then(payload => {\n            return payload\n        })\n    }\n\n    iconexAskAddress() {\n        return this.__iconexConnectRequest('REQUEST_ADDRESS').then(payload => {\n            return payload\n        })\n    }\n\n    // ======================================================================================\n    // Following classes are private because they are lower level methods at a protocol level\n    __iconexCallTransactionEx(from, to, method, value, stepLimit, params) {\n        const transaction = this.__icxCallTransactionBuild(from, to, method, value, stepLimit, params)\n        const jsonRpcQuery = {\n            jsonrpc: '2.0',\n            method: 'icx_sendTransaction',\n            params: IconService.IconConverter.toRawTransaction(transaction),\n            id: 1234\n        }\n        return this.__iconexJsonRpc(jsonRpcQuery)\n    }\n\n    __iconexCallTransaction(from, to, method, value, params) {\n        return api.__estimateCallStep(from, to, method, value, params).then(stepLimit => {\n            console.log(\"step = \", stepLimit)\n            return api.__iconexCallTransactionEx(from, to, method, value, stepLimit, params)\n        })\n    }\n\n    __iconexConnectRequest(requestType, payload) {\n        return new Promise((resolve, reject) => {\n            function eventHandler(event) {\n                const { payload } = event.detail\n                window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler)\n                resolve(payload)\n            }\n            window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler)\n\n            window.dispatchEvent(new window.CustomEvent('ICONEX_RELAY_REQUEST', {\n                detail: {\n                    type: requestType,\n                    payload\n                }\n            }))\n        })\n    }\n\n    __iconexJsonRpc(jsonRpcQuery) {\n        return this.__iconexConnectRequest('REQUEST_JSON-RPC', jsonRpcQuery).then(payload => {\n            return payload\n        })\n    }\n\n    // ======================================================================================\n    __call(to, method, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                let callBuilder = new IconService.IconBuilder.CallBuilder()\n                    .from(null)\n                    .to(to)\n                    .method(method)\n\n                // Optional \"params\" field\n                if (Object.keys(params).length !== 0) {\n                    callBuilder = callBuilder.params(params)\n                }\n\n                const call = callBuilder.build()\n                const result = this._iconService.call(call).execute()\n                resolve(result)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    __callTx(to, method, wallet, stepLimit, value = 0, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                let callTransactionBuilder = new IconService.IconBuilder.CallTransactionBuilder()\n                    .from(wallet.getAddress())\n                    .to(to)\n                    .value(IconService.IconConverter.toHex(IconService.IconAmount.of(value, IconService.IconAmount.Unit.ICX).toLoop()))\n                    .stepLimit(IconService.IconConverter.toBigNumber(stepLimit)) // 40000000\n                    .nid(IconService.IconConverter.toBigNumber(this._nid))\n                    .nonce(IconService.IconConverter.toBigNumber(1))\n                    .version(IconService.IconConverter.toBigNumber(3))\n                    .timestamp((new Date()).getTime() * 1000)\n                    .method(method)\n\n                // Optional \"params\" field\n                if (Object.keys(params).length !== 0) {\n                    callTransactionBuilder = callTransactionBuilder.params(params)\n                }\n\n                const transaction = new IconService.SignedTransaction(callTransactionBuilder.build(), wallet)\n                const result = this._iconService.sendTransaction(transaction).execute()\n                resolve(result)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    __estimateCallStep(from, to, method, value, params = {}) {\n        const transaction = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": \"debug_estimateStep\",\n            \"id\": 1,\n            \"params\": {\n                \"version\": \"0x3\",\n                \"from\": from,\n                \"to\": to,\n                \"value\": IconService.IconConverter.toHex(IconService.IconConverter.toBigNumber(value)),\n                \"timestamp\": IconService.IconConverter.toHex((new Date()).getTime() * 1000),\n                \"nid\": IconService.IconConverter.toHex(IconService.IconConverter.toBigNumber(this._nid)),\n                \"nonce\": \"0x1\",\n                \"dataType\": \"call\",\n                \"data\": {\n                    \"method\": method,\n                    \"params\": params\n                }\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n            try {\n                const result = this._iconDebugService.provider.request(transaction).execute()\n                resolve(result)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    __icxCallTransactionBuild(from, to, method, value, stepLimit, params = {}) {\n        let callTransactionBuilder = new IconService.IconBuilder.CallTransactionBuilder()\n            .from(from)\n            .to(to)\n            .value(IconService.IconConverter.toHex(value))\n            .stepLimit(IconService.IconConverter.toBigNumber(stepLimit))\n            .nid(IconService.IconConverter.toBigNumber(this._nid))\n            .nonce(IconService.IconConverter.toBigNumber(1))\n            .version(IconService.IconConverter.toBigNumber(3))\n            .timestamp((new Date()).getTime() * 1000)\n            .method(method)\n\n        // Optional \"params\" field\n        if (Object.keys(params).length !== 0) {\n            callTransactionBuilder = callTransactionBuilder.params(params)\n        }\n\n        return callTransactionBuilder.build()\n    }\n\n    __icxTransactionBuild(from, to, value, stepLimit) {\n        return new IconService.IconBuilder.IcxTransactionBuilder()\n            .from(from)\n            .to(to)\n            .value(IconService.IconConverter.toBigNumber(value))\n            .stepLimit(IconService.IconConverter.toBigNumber(stepLimit))\n            .nid(IconService.IconConverter.toBigNumber(this._nid))\n            .version(IconService.IconConverter.toBigNumber(3))\n            .timestamp((new Date()).getTime() * 1000)\n            .build()\n    }\n\n    async __txResult(txHash, retriesLeft = 1000, interval = 100) {\n        try {\n            return await this._iconService.getTransactionResult(txHash).execute()\n        } catch (error) {\n            if (retriesLeft) {\n                await new Promise((resolve, reject) => setTimeout(resolve, interval))\n                return this.__txResult(txHash, retriesLeft - 1, interval)\n            } else throw new UnconfirmedTransaction(txHash)\n        }\n    }\n}\n\nexport const api = new API(SCORE_NETWORK, SCORE_ENDPOINT)\n","import { api } from './API'\nimport { ICX_TOKEN_CONTRACT, ICX_TOKEN_DECIMALS } from './constants'\n\nexport const getTokenDetails = (contract) => {\n    if (contract === ICX_TOKEN_CONTRACT) {\n        return new Promise((resolve, reject) => {\n            resolve({ name: 'ICX', symbol: 'ICX', contract: contract, decimals: ICX_TOKEN_DECIMALS })\n        })\n    }\n    return api.tokenName(contract).then(name => {\n        return api.tokenSymbol(contract).then(symbol => {\n            return api.getDecimals(contract).then(decimals => {\n                return { name: name, symbol: symbol, contract: contract, decimals: parseInt(decimals, 16) }\n            })\n        })\n    })\n}\n","import React from 'react'\nimport './OrderView.css';\nimport { IconConverter } from 'icon-sdk-js'\nimport { api } from './API'\nimport { ICX_TOKEN_CONTRACT } from './constants'\n\nconst OrderView = ({ wallet, order }) => {\n    const orderSuccess = (order) => {\n        return order && order['status'] === 'FILLED'\n    }\n\n    const orderEmpty = (order) => {\n        return order && order['status'] === 'EMPTY'\n    }\n\n    const depositButtonDisabled = (order) => {\n        return order['status'] !== 'EMPTY'\n    }\n\n    const withdrawButtonDisabled = (order) => {\n        return order['status'] !== 'FILLED'\n    }\n\n    const depositOrder = (order) => {\n        if (order['contract'] === ICX_TOKEN_CONTRACT) {\n            api.fulfillIcxOrder(wallet, order)\n        } else {\n            api.fulfillIRC2Order(wallet, order);\n        }\n    }\n\n    const refundOrder = (order) => {\n        api.refundOrder(wallet, order)\n    }\n\n    return (\n        <>\n            {orderSuccess(order) &&\n                <div className=\"success-checkmark\">\n                    <div className=\"check-icon\">\n                        <span className=\"icon-line line-tip\"></span>\n                        <span className=\"icon-line line-long\"></span>\n                        <div className=\"icon-circle\"></div>\n                        <div className=\"icon-fix\"></div>\n                    </div>\n                </div>\n            }\n\n            {orderEmpty(order) && <>\n                <div className=\"waitForDeposit\">Waiting for deposit</div>\n                <div className=\"loadingDots\">\n                    <span>.</span> <span>.</span> <span>.</span></div>\n            </>}\n\n            <p className=\"bigtext\">\n                {IconConverter.toBigNumber(order['amount'])\n                    / IconConverter.toBigNumber('10').exponentiatedBy(order['token']['decimals'])\n                } {order['token']['symbol']} ({order['token']['name']})\n            </p>\n\n            <div className=\"buttonsAction\">\n                <button className=\"flatbutton\" disabled={depositButtonDisabled(order)}\n                    onClick={() => { depositOrder(order) }}>Deposit</button>\n                <button className=\"flatbutton\" disabled={withdrawButtonDisabled(order)}\n                    onClick={() => { refundOrder(order) }}>Withdraw</button>\n            </div>\n        </>\n    )\n}\n\nexport default OrderView","import React, { useState, useEffect } from 'react'\nimport { api } from './API'\nimport { getTokenDetails } from './utils'\nimport OrderView from './OrderView'\nimport './Swap.css';\n\nconst Swap = ({ match, wallet }) => {\n    const swapId = match.params.id\n    const [orders, setOrders] = useState(null)\n    const [swap, setSwap] = useState(null)\n    const [ready, setReady] = useState(false)\n    const [errorUi, setErrorUi] = useState(null)\n\n    const refreshOrders = (orderId1, orderId2) => {\n        return api.getOrder(orderId1).then(order1 => {\n            return getTokenDetails(order1['contract']).then(token => {\n                order1['token'] = token\n                order1['id'] = orderId1;\n\n                return api.getOrder(orderId2).then(order2 => {\n                    return getTokenDetails(order2['contract']).then(token => {\n                        order2['token'] = token\n                        order2['id'] = orderId2;\n\n                        setOrders([order1, order2])\n                    })\n                })\n            })\n        })\n    }\n\n    useEffect(() => {\n        const refreshSwap = () => {\n            return api.getSwap(swapId).then(swap => {\n                refreshOrders(swap['order1'], swap['order2']).then(() => {\n                    setSwap(swap)\n                    !ready && setReady(true)\n                }).catch((error) => {\n                    setErrorUi(error)\n                })\n            })\n        }\n\n        refreshSwap()\n        if (ready) {\n            setInterval(() => {\n                refreshSwap()\n            }, 1000);\n        }\n    }, [ready, swapId]);\n\n    const swappable = () => {\n        return (orders\n            && orders[0]['status'] === 'FILLED'\n            && orders[1]['status'] === 'FILLED')\n    }\n\n    const cancellable = () => {\n        return (swap && swap['status'] === 'PENDING')\n    }\n\n    const doSwapClicked = () => {\n        api.doSwap(wallet, swapId).catch(error => { setErrorUi(error) })\n    }\n\n    const cancelSwapClicked = () => {\n        api.cancelSwap(wallet, swapId).catch(error => { setErrorUi(error) })\n    }\n\n    const swapSuccess = () => {\n        return swap && swap['status'] === 'SUCCESS'\n    }\n\n    const swapCancel = () => {\n        return swap && swap['status'] === 'CANCELLED'\n    }\n\n    // Fatal error\n    if (errorUi) {\n        return (\n            <div className=\"overlay\">\n                <div className=\"overlayText\">\n                    An error occured : {errorUi}\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <>\n            {swapSuccess() &&\n                <div className=\"overlay\">\n                    <div className=\"overlayText\">\n                        Swap successfull! <br />\n                        <a href={api.getTrackerEndpoint() + \"/transaction/\" + swap['transaction']} rel=\"noopener noreferrer\" target=\"_blank\">\n                            Check the transaction\n                </a>\n                    </div>\n                </div>\n            }\n\n            {swapCancel() &&\n                <div className=\"overlay\">\n                    <div className=\"overlayText\">\n                        Swap cancelled. Your funds have been refunded. <br />\n                        <a href={api.getTrackerEndpoint() + \"/transaction/\" + swap['transaction']} rel=\"noopener noreferrer\" target=\"_blank\">\n                            Check the transaction\n                    </a>\n                    </div>\n                </div>\n            }\n\n            {!orders && <>\n                <div className=\"overlay\">\n                    <div className=\"overlayText\">\n                        Loading, please wait...\n                    </div>\n                </div>\n            </>}\n\n            {orders && <>\n                <div className=\"split left\">\n                    <div className=\"centered\">\n                        <OrderView wallet={wallet} order={orders[0]} />\n                    </div>\n                </div>\n\n\n                <div className=\"split right\">\n                    <div className=\"centered\">\n                        <OrderView wallet={wallet} order={orders[1]} />\n                    </div>\n                </div>\n\n                <div className=\"center\">\n                    <button className=\"flatbutton bigbutton\" disabled={!swappable()}\n                        onClick={() => doSwapClicked()}>\n                        Swap!\n                    </button>\n                </div>\n\n                {swap && swap['author'] === wallet &&\n                    <div className=\"bottom\">\n                        <button className=\"flatbutton\" disabled={!cancellable()}\n                            onClick={() => cancelSwapClicked()}>\n                            Cancel Swap\n                        </button>\n                    </div>\n                }\n            </>}\n        </>\n    )\n}\n\nexport default Swap","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport logo from './static/img/logo.png'\nimport { WALLET_LOCAL_STORAGE_KEY } from './constants'\nimport './Header.css';\nimport { api } from './API';\n\nconst Header = ({ wallet, setWallet }) => {\n\n    const disconnectClick = () => {\n        localStorage.removeItem(WALLET_LOCAL_STORAGE_KEY)\n        setWallet(null)\n    }\n\n    return (\n        <div id=\"header\">\n            <div id=\"headercontentleft\">\n                <Link to=\"/\"><img src={logo} height=\"60\" alt=\"logo\" /></Link>\n                <Link to=\"/\" id=\"logotexthref\"><div id=\"logotext\">ICONSwap</div></Link>\n                <div id=\"headerBubble\">Status: Beta</div>\n                <div id=\"headerBubble\">Network: {api.getNetworkName()}</div>\n            </div>\n            {wallet && <>\n                <div id=\"headercontentright\">\n                    <button className=\"disconnect\" onClick={() => { disconnectClick() }}>Disconnect</button>\n                </div>\n            </>}\n        </div>\n    )\n}\n\nexport default Header","import React, { useState } from 'react'\nimport { IconConverter } from 'icon-sdk-js'\nimport { api } from './API'\nimport { Redirect } from 'react-router-dom'\nimport { getTokenDetails } from './utils'\n\nconst Homepage = ({ wallet }) => {\n\n    const [whitelist, setWhitelist] = useState(null)\n    const [contract1, setContract1] = useState(null)\n    const [amount1, setAmount1] = useState(null)\n    const [contract2, setContract2] = useState(null)\n    const [amount2, setAmount2] = useState(null)\n    const [swapId, setSwapId] = useState(null)\n    const [waitForSwapCreation, setWaitForSwapCreation] = useState(false)\n\n    !whitelist && api.getWhitelist().then(contract => {\n        const promises = contract.map(contract => {\n            return getTokenDetails(contract)\n        })\n\n        Promise.all(promises).then(whitelist => {\n            setContract1(whitelist[0])\n            setContract2(whitelist[0])\n            whitelist = whitelist.reduce(function (map, obj) {\n                map[obj.contract] = obj\n                return map\n            }, {})\n            setWhitelist(whitelist)\n        })\n    })\n\n    const createSwapClicked = () => {\n        setWaitForSwapCreation(true)\n        api.getDecimals(contract1.contract).then(decimals1 => {\n            api.getDecimals(contract2.contract).then(decimals2 => {\n                const digits1 = IconConverter.toBigNumber('10').exponentiatedBy(decimals1)\n                const digits2 = IconConverter.toBigNumber('10').exponentiatedBy(decimals2)\n                api.createSwap(\n                    wallet,\n                    contract1.contract,\n                    amount1 * digits1,\n                    contract2.contract,\n                    amount2 * digits2)\n                    .then(swapInfo => {\n                        if (swapInfo) {\n                            setSwapId(swapInfo['swapId'])\n                        }\n                    }).catch((reason) => {\n                        console.log(reason)\n                    }).finally(() => {\n                        setWaitForSwapCreation(false)\n                    })\n            })\n        })\n    }\n\n    const swappable = () => {\n        return contract1 && contract2 && amount1 && amount2\n    }\n\n    return (\n        <>\n            {swapId && <Redirect to={\"/swap/\" + swapId} />}\n\n            {!whitelist && <>\n                <div className=\"overlay\">\n                    <div className=\"overlayText\">\n                        Loading, please wait...\n                    </div>\n                </div>\n            </>}\n\n            {waitForSwapCreation && <>\n                <div className=\"overlay\">\n                    <div className=\"overlayText\">\n                        Creating Swap, please wait...\n                    </div>\n                </div>\n            </>}\n\n            <div className=\"split left\">\n                <div className=\"centered\">\n                    {whitelist && <>\n                        <p>Choose a token :</p>\n                        <select id=\"tokens1\"\n                            onChange={() => setContract1(whitelist[document.getElementById('tokens1').value])}>\n\n                            {Object.keys(whitelist).map((key) => (\n                                <option key={whitelist[key].contract} value={whitelist[key].contract}>\n                                    {whitelist[key].name} ({whitelist[key].symbol})\n                        </option>\n                            ))}\n\n                        </select>\n\n                        <p>Choose the amount :</p>\n                        <input id=\"amount1\" onChange={() => setAmount1(document.getElementById('amount1').value)}>\n                        </input>\n                    </>}\n                </div>\n            </div>\n\n            <div className=\"split right\">\n                <div className=\"centered\">\n                    {whitelist && <>\n                        <p>Choose a token :</p>\n                        <select id=\"tokens2\"\n                            onChange={() => setContract2(whitelist[document.getElementById('tokens2').value])}>\n\n                            {Object.keys(whitelist).map((key) => (\n                                <option key={whitelist[key].contract} value={whitelist[key].contract}>\n                                    {whitelist[key].name} ({whitelist[key].symbol})\n                        </option>\n                            ))}\n\n                        </select>\n\n                        <p>Choose the amount :</p>\n                        <input id=\"amount2\" onChange={() => setAmount2(document.getElementById('amount2').value)}>\n                        </input>\n                    </>}\n                </div>\n            </div>\n\n            {swappable() &&\n                <div className=\"center\">\n                    <button className=\"flatbutton bigbutton\"\n                        onClick={() => createSwapClicked()}>\n                        Create Swap\n                        </button>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Homepage","import React, { useState } from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport './App.css';\nimport Swap from './Swap'\nimport Header from './Header'\nimport Homepage from './Homepage'\nimport { WALLET_LOCAL_STORAGE_KEY } from './constants'\nimport { api } from './API'\n\nfunction App() {\n\n  const [wallet, setWallet] = useState(localStorage.getItem(WALLET_LOCAL_STORAGE_KEY))\n\n  const loginIconex = () => {\n    api.iconexAskAddress().then(address => {\n      setWallet(address)\n      localStorage.setItem(WALLET_LOCAL_STORAGE_KEY, address)\n    })\n  }\n\n  return (\n    <div className=\"App\">\n\n      {!wallet &&\n        <div className=\"overlay\">\n          <div className=\"overlayText\">\n            <p>You need Google Chrome with ICONex installed for using ICONSwap.</p>\n            <button className=\"bigbutton\"\n              onClick={() => loginIconex()}>\n              Login with ICONex\n          </button>\n          </div>\n        </div>\n      }\n\n      {wallet && <>\n\n        <Header wallet={wallet} setWallet={setWallet} />\n\n        <div id=\"body\">\n          <Switch>\n            <Route exact path='/' render={(props) => <Homepage {...props} wallet={wallet} />} />\n            <Route exact path='/swap/:id' render={(props) => <Swap {...props} wallet={wallet} />} />\n          </Switch>\n        </div>\n      </>}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom'\n\nReactDOM.render(\n    <HashRouter >\n        <App />\n    </HashRouter>,\n    document.querySelector('#root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}